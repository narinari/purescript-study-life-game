(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-bundle 0.8.4.0
var PS = {};
(function(exports) {
  // module Color
  // jshint node: true

  "use strict";

  // Convert a number between 0 and 255 to a hex value between 00 and ff.
  exports.toHex = function(n) {
    var str = n.toString(16);
    if (str.length == 1) {
      return "0" + str;
    }
    return str;
  };
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var Show = function (show) {
      this.show = show;
  };
  var $dollar = function (f) {
      return function (x) {
          return f(x);
      };
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };                
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };                                                   
  var $less$less$less = function (dictSemigroupoid) {
      return compose(dictSemigroupoid);
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (dictSemiring) {
      return add(dictSemiring);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["compare"] = compare;
  exports["eq"] = eq;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["$"] = $dollar;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["applyArray"] = applyArray;
  exports["applicativeArray"] = applicativeArray;
  exports["bindArray"] = bindArray;
  exports["monadArray"] = monadArray;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringInt"] = semiringInt;
  exports["eqInt"] = eqInt;
  exports["ordInt"] = ordInt;
  exports["boundedInt"] = boundedInt;
  exports["showInt"] = showInt;
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var join = function (dictBind) {
      return function (m) {
          return Prelude[">>="](dictBind)(m)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["join"] = join;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  exports.replicate = function (n) {
    return function (v) {
      if (n < 1) return [];
      var r = new Array(n);
      for (var i = 0; i < n; i++) r[i] = v;
      return r;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Prelude.functorArray;
  }, Prelude.append(Prelude.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };     
  var monoidArray = new Monoid(function () {
      return Prelude.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 27, column 1 - line 28, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 122, column 3 - line 123, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 181, column 3 - line 182, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($161) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["+"](dictSemiring))(Prelude.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["sum"] = sum;
  exports["sequence_"] = sequence_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequenceDefault"] = sequenceDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];        
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 11, column 1 - line 12, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];        
  var $colon = $foreign.cons;
  var $dot$dot = $foreign.range;
  var take = $foreign.slice(0);
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var last = function (xs) {
      return $bang$bang(xs)($foreign.length(xs) - 1);
  };
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($69) {
          return Data_Maybe.maybe([  ])(singleton)(f($69));
      });
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  exports["take"] = take;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["concatMap"] = concatMap;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["last"] = last;
  exports["head"] = head;
  exports[":"] = $colon;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["zipWith"] = $foreign.zipWith;
  exports["drop"] = $foreign.drop;
  exports["slice"] = $foreign.slice;
  exports["concat"] = $foreign.concat;
  exports["length"] = $foreign.length;
  exports["replicate"] = $foreign.replicate;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Math"];
  exports["%"] = $foreign["%"];
  exports["round"] = $foreign.round;
  exports["max"] = $foreign.max;
  exports["abs"] = $foreign.abs;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 49, column 1 - line 56, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  exports["round"] = round;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $39 = Prelude.compare(dictOrd)(x)(y);
              if ($39 instanceof Prelude.LT) {
                  return x;
              };
              if ($39 instanceof Prelude.EQ) {
                  return x;
              };
              if ($39 instanceof Prelude.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 60, column 3 - line 67, column 1: " + [ $39.constructor.name ]);
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $42 = Prelude.compare(dictOrd)(x)(y);
              if ($42 instanceof Prelude.LT) {
                  return y;
              };
              if ($42 instanceof Prelude.EQ) {
                  return x;
              };
              if ($42 instanceof Prelude.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 69, column 3 - line 81, column 1: " + [ $42.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["max"] = max;
  exports["min"] = min;
  exports["clamp"] = clamp;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Color"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var $$Math = PS["Math"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var toRGBA$prime = function (v) {
      var h$prime = v.value0 / 60.0;
      var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
      var m = v.value2 - chr / 2.0;
      var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
      var col = (function () {
          if (h$prime < 1.0) {
              return {
                  r: chr, 
                  g: x, 
                  b: 0.0
              };
          };
          if (1.0 <= h$prime && h$prime < 2.0) {
              return {
                  r: x, 
                  g: chr, 
                  b: 0.0
              };
          };
          if (2.0 <= h$prime && h$prime < 3.0) {
              return {
                  r: 0.0, 
                  g: chr, 
                  b: x
              };
          };
          if (3.0 <= h$prime && h$prime < 4.0) {
              return {
                  r: 0.0, 
                  g: x, 
                  b: chr
              };
          };
          if (4.0 <= h$prime && h$prime < 5.0) {
              return {
                  r: x, 
                  g: 0.0, 
                  b: chr
              };
          };
          if (Prelude.otherwise) {
              return {
                  r: chr, 
                  g: 0.0, 
                  b: x
              };
          };
          throw new Error("Failed pattern match at Color line 295, column 1 - line 313, column 1: " + [  ]);
      })();
      return {
          r: col.r + m, 
          g: col.g + m, 
          b: col.b + m, 
          a: v.value3
      };
  };
  var toRGBA = function (v) {
      var c = toRGBA$prime(v);
      var g = Data_Int.round(255.0 * c.g);
      var r = Data_Int.round(255.0 * c.r);
      var b = Data_Int.round(255.0 * c.b);
      return {
          r: r, 
          g: g, 
          b: b, 
          a: v.value3
      };
  };
  var toHexString = function (color) {
      var c = toRGBA(color);
      return "#" + ($foreign.toHex(c.r) + ($foreign.toHex(c.g) + $foreign.toHex(c.b)));
  }; 
  var modPos = function (x) {
      return function (y) {
          return $$Math["%"]($$Math["%"](x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Prelude.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Prelude.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Prelude.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Prelude.ordInt)(Data_Ord.max(Prelude.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Prelude.ordInt)(Data_Ord.min(Prelude.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Prelude.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color line 119, column 1 - line 150, column 1: " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Prelude.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color line 119, column 1 - line 150, column 1: " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  exports["toHexString"] = toHexString;
  exports["toRGBA"] = toRGBA;
  exports["rgb"] = rgb;
  exports["rgba"] = rgba;
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];        
  var ContT = function (x) {
      return x;
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var functorContT = function (dictMonad) {
      return new Prelude.Functor(function (f) {
          return function (m) {
              return function (k) {
                  return runContT(m)(function (a) {
                      return k(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorContT(dictMonad);
      }, function (f) {
          return function (v) {
              return function (k) {
                  return runContT(f)(function (g) {
                      return runContT(v)(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var applicativeContT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyContT(dictMonad);
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  exports["ContT"] = ContT;
  exports["runContT"] = runContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
})(PS["Control.Monad.Cont.Trans"] = PS["Control.Monad.Cont.Trans"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];        
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["throwException"] = $foreign.throwException;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Ref

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["writeRef"] = $foreign.writeRef;
  exports["readRef"] = $foreign.readRef;
  exports["newRef"] = $foreign.newRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Exists

  exports.mkExists = function (fa) {
    return fa;
  };

  exports.runExists = function (f) {
    return function (fa) {
      return f(fa);
    };
  };
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Exists"];
  var Prelude = PS["Prelude"];
  exports["runExists"] = $foreign.runExists;
  exports["mkExists"] = $foreign.mkExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Either.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Either.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];        
  var fromRight = function (v) {
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      return $foreign.unsafeThrow("Data.Either.Unsafe.fromRight called on Left value");
  };
  exports["fromRight"] = fromRight;
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];        
  var MonadRec = function (__superclass_Prelude$dotMonad_0, tailRecM) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecEff = function (f) {
      return function (a) {
          var f$prime = function ($18) {
              return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(f($18));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f$prime(v2.value0)();
                          v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Data_Either.Right) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 81, column 5 - line 86, column 3: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Either_Unsafe.fromRight)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Exists = PS["Data.Exists"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Coyoneda = function (x) {
      return x;
  };
  var lowerCoyoneda = function (dictFunctor) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return Prelude["<$>"](dictFunctor)(v1.k)(v1.fi);
          })(v);
      };
  };
  var liftCoyoneda = function (fa) {
      return Coyoneda(Data_Exists.mkExists({
          k: Prelude.id(Prelude.categoryFn), 
          fi: fa
      }));
  }; 
  var coyoneda = function (k) {
      return function (fi) {
          return Coyoneda(Data_Exists.mkExists({
              k: k, 
              fi: fi
          }));
      };
  };
  var functorCoyoneda = new Prelude.Functor(function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(function ($37) {
                  return f(v1.k($37));
              })(v1.fi);
          })(v);
      };
  });
  var liftCoyonedaT = function (nat) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(v1.k)(nat(v1.fi));
          })(v);
      };
  };
  var liftCoyonedaTF = function (dictFunctor) {
      return function (nat) {
          return function ($39) {
              return lowerCoyoneda(dictFunctor)(liftCoyonedaT(nat)($39));
          };
      };
  };
  exports["Coyoneda"] = Coyoneda;
  exports["liftCoyonedaTF"] = liftCoyonedaTF;
  exports["liftCoyonedaT"] = liftCoyonedaT;
  exports["lowerCoyoneda"] = lowerCoyoneda;
  exports["liftCoyoneda"] = liftCoyoneda;
  exports["coyoneda"] = coyoneda;
  exports["functorCoyoneda"] = functorCoyoneda;
})(PS["Data.Coyoneda"] = PS["Data.Coyoneda"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Exists = PS["Data.Exists"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Inject = PS["Data.Inject"];        
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Free = (function () {
      function Free(value0) {
          this.value0 = value0;
      };
      Free.create = function (value0) {
          return new Free(value0);
      };
      return Free;
  })();
  var Gosub = (function () {
      function Gosub(value0) {
          this.value0 = value0;
      };
      Gosub.create = function (value0) {
          return new Gosub(value0);
      };
      return Gosub;
  })();
  var MonadFree = function (wrap) {
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  }; 
  var monadFreeFree = function (dictFunctor) {
      return new MonadFree(Free.create);
  };
  var liftF = function (dictFunctor) {
      return function (dictMonad) {
          return function (dictMonadFree) {
              return function ($60) {
                  return wrap(dictMonadFree)(Prelude.map(dictFunctor)(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]()))($60));
              };
          };
      };
  };
  var gosub = function (a) {
      return function (f) {
          return Gosub.create(Data_Exists.mkExists({
              a: a, 
              f: f
          }));
      };
  };
  var monadFree = function (dictFunctor) {
      return new Prelude.Monad(function () {
          return applicativeFree(dictFunctor);
      }, function () {
          return bindFree(dictFunctor);
      });
  };
  var functorFree = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (v) {
              if (v instanceof Pure) {
                  return new Pure(f(v.value0));
              };
              return Prelude.liftA1(applicativeFree(dictFunctor))(f)(v);
          };
      });
  };
  var bindFree = function (dictFunctor) {
      return new Prelude.Bind(function () {
          return applyFree(dictFunctor);
      }, function (v) {
          return function (k) {
              if (v instanceof Gosub) {
                  return Data_Exists.runExists(function (v1) {
                      return gosub(v1.a)(function (x) {
                          return gosub(function (unit) {
                              return v1.f(x);
                          })(k);
                      });
                  })(v.value0);
              };
              return gosub(function (unit) {
                  return v;
              })(k);
          };
      });
  };
  var applyFree = function (dictFunctor) {
      return new Prelude.Apply(function () {
          return functorFree(dictFunctor);
      }, Prelude.ap(monadFree(dictFunctor)));
  };
  var applicativeFree = function (dictFunctor) {
      return new Prelude.Applicative(function () {
          return applyFree(dictFunctor);
      }, Pure.create);
  };
  var resume = function (__copy_dictFunctor) {
      return function (__copy_f) {
          var dictFunctor = __copy_dictFunctor;
          var f = __copy_f;
          tco: while (true) {
              var resumeGosub = function (v) {
                  if (v instanceof Gosub) {
                      return Data_Exists.runExists(function (v1) {
                          var $44 = v1.a(Prelude.unit);
                          if ($44 instanceof Pure) {
                              return new Data_Either.Right(v1.f($44.value0));
                          };
                          if ($44 instanceof Free) {
                              return new Data_Either.Left(Prelude["<$>"](dictFunctor)(function (h) {
                                  return Prelude[">>="](bindFree(dictFunctor))(h)(v1.f);
                              })($44.value0));
                          };
                          if ($44 instanceof Gosub) {
                              return Data_Exists.runExists(function (v3) {
                                  return new Data_Either.Right(Prelude[">>="](bindFree(dictFunctor))(v3.a(Prelude.unit))(function (z) {
                                      return Prelude[">>="](bindFree(dictFunctor))(v3.f(z))(v1.f);
                                  }));
                              })($44.value0);
                          };
                          throw new Error("Failed pattern match at Control.Monad.Free line 151, column 31 - line 154, column 118: " + [ $44.constructor.name ]);
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 150, column 3 - line 158, column 1: " + [ v.constructor.name ]);
              };
              if (f instanceof Pure) {
                  return new Data_Either.Right(f.value0);
              };
              if (f instanceof Free) {
                  return new Data_Either.Left(f.value0);
              };
              var $53 = resumeGosub(f);
              if ($53 instanceof Data_Either.Left) {
                  return new Data_Either.Left($53.value0);
              };
              if ($53 instanceof Data_Either.Right) {
                  var __tco_dictFunctor = dictFunctor;
                  dictFunctor = __tco_dictFunctor;
                  f = $53.value0;
                  continue tco;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 145, column 8 - line 148, column 3: " + [ $53.constructor.name ]);
          };
      };
  };
  var runFreeM = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (fn) {
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (f) {
                  var $56 = resume(dictFunctor)(f);
                  if ($56 instanceof Data_Either.Left) {
                      return Prelude["<$>"]((((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Left.create)(fn($56.value0));
                  };
                  if ($56 instanceof Data_Either.Right) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right($56.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 165, column 3 - line 171, column 1: " + [ $56.constructor.name ]);
              });
          };
      };
  };
  var runFreeCM = function (dictMonadRec) {
      return function (nat) {
          return runFreeM(Data_Coyoneda.functorCoyoneda)(dictMonadRec)(Data_Coyoneda.liftCoyonedaTF((((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(nat));
      };
  };
  var liftFC = function ($65) {
      return liftF(Data_Coyoneda.functorCoyoneda)(monadFree(Data_Coyoneda.functorCoyoneda))(monadFreeFree(Data_Coyoneda.functorCoyoneda))(Data_Coyoneda.liftCoyoneda($65));
  };
  exports["Pure"] = Pure;
  exports["Free"] = Free;
  exports["Gosub"] = Gosub;
  exports["MonadFree"] = MonadFree;
  exports["runFreeCM"] = runFreeCM;
  exports["runFreeM"] = runFreeM;
  exports["liftFC"] = liftFC;
  exports["liftF"] = liftF;
  exports["wrap"] = wrap;
  exports["functorFree"] = functorFree;
  exports["applyFree"] = applyFree;
  exports["applicativeFree"] = applicativeFree;
  exports["bindFree"] = bindFree;
  exports["monadFree"] = monadFree;
  exports["monadFreeFree"] = monadFreeFree;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];        
  var Parallel = function (x) {
      return x;
  };
  var runParallel = function (v) {
      return v;
  };
  var refs = Control_Monad_Eff_Unsafe.unsafeInterleaveEff;
  var par = function (f) {
      return function (ca) {
          return function (cb) {
              return Control_Monad_Cont_Trans.ContT(function (k) {
                  return function __do() {
                      var v = refs(Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value))();
                      var v1 = refs(Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value))();
                      Control_Monad_Cont_Trans.runContT(ca)(function (a) {
                          return function __do() {
                              var v2 = refs(Control_Monad_Eff_Ref.readRef(v1))();
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return refs(Control_Monad_Eff_Ref.writeRef(v)(new Data_Maybe.Just(a)))();
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return k(f(a)(v2.value0))();
                              };
                              throw new Error("Failed pattern match at Control.Parallel line 37, column 5 - line 41, column 3: " + [ v2.constructor.name ]);
                          };
                      })();
                      return Control_Monad_Cont_Trans.runContT(cb)(function (b) {
                          return function __do() {
                              var v2 = refs(Control_Monad_Eff_Ref.readRef(v))();
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return refs(Control_Monad_Eff_Ref.writeRef(v1)(new Data_Maybe.Just(b)))();
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return k(f(v2.value0)(b))();
                              };
                              throw new Error("Failed pattern match at Control.Parallel line 43, column 5 - line 49, column 1: " + [ v2.constructor.name ]);
                          };
                      })();
                  };
              });
          };
      };
  };
  var inParallel = Parallel;
  var functorParallel = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(f)(v);
      };
  });
  var applyParallel = new Prelude.Apply(function () {
      return functorParallel;
  }, function (v) {
      return function (v1) {
          return par(Prelude["$"])(v)(v1);
      };
  });
  var applicativeParallel = new Prelude.Applicative(function () {
      return applyParallel;
  }, function (a) {
      return Parallel(Prelude.pure(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.monadEff))(a));
  });
  exports["par"] = par;
  exports["runParallel"] = runParallel;
  exports["inParallel"] = inParallel;
  exports["functorParallel"] = functorParallel;
  exports["applyParallel"] = applyParallel;
  exports["applicativeParallel"] = applicativeParallel;
})(PS["Control.Parallel"] = PS["Control.Parallel"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Event.EventTarget

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  exports["addEventListener"] = $foreign.addEventListener;
  exports["eventListener"] = $foreign.eventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var click = "click";
  exports["click"] = click;
})(PS["DOM.Event.EventTypes"] = PS["DOM.Event.EventTypes"] || {});
(function(exports) {
  /* global exports, window */
  "use strict";

  // module DOM.HTML

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function(x) { return x; }
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                           
  var elementToNode = Unsafe_Coerce.unsafeCoerce;
  var elementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["elementToEventTarget"] = elementToEventTarget;
  exports["elementToNode"] = elementToNode;
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];              
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Window

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.nullable = function(a, r, f) {
      return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];                              
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.Node.Element"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["setAttribute"] = $foreign.setAttribute;
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.Node

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
        return {};
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["setTextContent"] = $foreign.setTextContent;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  /* global exports */
  "use strict";                                               

  exports.querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["querySelector"] = $foreign.querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
    "use strict";

  // module DOM.RequestAnimationFrame 

  var requestAnimationFrame = null;

  // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
  exports.requestAnimationFrame_ = function(window_) {
      return function(action) {

          if (!requestAnimationFrame) {
              requestAnimationFrame = (function() {
                  return window_.requestAnimationFrame ||
                      window_.webkitRequestAnimationFrame ||
                      window_.mozRequestAnimationFrame ||
                      function(callback) {
                          window_.setTimeout(callback, 1000 / 60);
                      };
              })();
          }

          return function() {
              return requestAnimationFrame(action);
          };
      }
  };
})(PS["DOM.RequestAnimationFrame"] = PS["DOM.RequestAnimationFrame"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOM.RequestAnimationFrame"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];        
  var requestAnimationFrame = function (action) {
      return function __do() {
          var v = DOM_HTML.window();
          return $foreign.requestAnimationFrame_(v)(action)();
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS["DOM.RequestAnimationFrame"] = PS["DOM.RequestAnimationFrame"] || {});
(function(exports) {
    "use strict";

  // module DOMUtil

  exports.removeAttribute = function (name) {
    return function (element) {
      return function () {
        element.removeAttribute(name);
        return {};
      };
    };
  };
})(PS["DOMUtil"] = PS["DOMUtil"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["DOMUtil"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Element = PS["DOM.Node.Element"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var DOM_Node_Types = PS["DOM.Node.Types"];        
  var setText = function (text) {
      return function ($0) {
          return DOM_Node_Node.setTextContent(text)(DOM_Node_Types.elementToNode($0));
      };
  };
  var enableElement = $foreign.removeAttribute("disabled");
  var disableElement = DOM_Node_Element.setAttribute("disabled")("true");
  exports["enableElement"] = enableElement;
  exports["disableElement"] = disableElement;
  exports["setText"] = setText;
})(PS["DOMUtil"] = PS["DOMUtil"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.setLineCapImpl = function(cap) {
      return function(ctx) {
          return function() {
              ctx.lineCap = cap;
              return ctx;
          };
      };
  };

  exports.setGlobalCompositeOperationImpl = function(ctx) {
      return function(op) {
          return function() {
              ctx.globalCompositeOperation = op;
              return ctx;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.globalAlpha = alpha;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.transform = function(t) {
      return function(ctx) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.textAlignImpl = function(ctx) {
      return function() {
          return ctx.textAlign;
      }
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

  exports.getImageData = function(ctx) {
      return function(x) {
          return function(y) {
              return function(w) {
                  return function(h) {
                      return function() {
                          return ctx.getImageData(x, y, w, h);
                      };
                  };
              };
          };
      };
  };

  exports.putImageDataFull = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function(dx) {
                      return function(dy) {
                          return function(dw) {
                              return function(dh) {
                                  return function() {
                                      ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                      return ctx;
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.putImageData = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.putImageData(image_data, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.createImageData = function(ctx) {
      return function(sw) {
          return function(sh) {
              return function() {
                  return ctx.createImageData(sw, sh);
              };
          };
      };
  };

  exports.createImageDataCopy = function(ctx) {
      return function(image_data) {
          return function() {
              return ctx.createImageData(image_data);
          };
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];        
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var SourceOver = (function () {
      function SourceOver() {

      };
      SourceOver.value = new SourceOver();
      return SourceOver;
  })();
  var SourceIn = (function () {
      function SourceIn() {

      };
      SourceIn.value = new SourceIn();
      return SourceIn;
  })();
  var SourceOut = (function () {
      function SourceOut() {

      };
      SourceOut.value = new SourceOut();
      return SourceOut;
  })();
  var SourceAtop = (function () {
      function SourceAtop() {

      };
      SourceAtop.value = new SourceAtop();
      return SourceAtop;
  })();
  var DestinationOver = (function () {
      function DestinationOver() {

      };
      DestinationOver.value = new DestinationOver();
      return DestinationOver;
  })();
  var DestinationIn = (function () {
      function DestinationIn() {

      };
      DestinationIn.value = new DestinationIn();
      return DestinationIn;
  })();
  var DestinationOut = (function () {
      function DestinationOut() {

      };
      DestinationOut.value = new DestinationOut();
      return DestinationOut;
  })();
  var DestinationAtop = (function () {
      function DestinationAtop() {

      };
      DestinationAtop.value = new DestinationAtop();
      return DestinationAtop;
  })();
  var Lighter = (function () {
      function Lighter() {

      };
      Lighter.value = new Lighter();
      return Lighter;
  })();
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Xor = (function () {
      function Xor() {

      };
      Xor.value = new Xor();
      return Xor;
  })();
  var Multiply = (function () {
      function Multiply() {

      };
      Multiply.value = new Multiply();
      return Multiply;
  })();
  var Screen = (function () {
      function Screen() {

      };
      Screen.value = new Screen();
      return Screen;
  })();
  var Overlay = (function () {
      function Overlay() {

      };
      Overlay.value = new Overlay();
      return Overlay;
  })();
  var Darken = (function () {
      function Darken() {

      };
      Darken.value = new Darken();
      return Darken;
  })();
  var Lighten = (function () {
      function Lighten() {

      };
      Lighten.value = new Lighten();
      return Lighten;
  })();
  var ColorDodge = (function () {
      function ColorDodge() {

      };
      ColorDodge.value = new ColorDodge();
      return ColorDodge;
  })();
  var ColorBurn = (function () {
      function ColorBurn() {

      };
      ColorBurn.value = new ColorBurn();
      return ColorBurn;
  })();
  var HardLight = (function () {
      function HardLight() {

      };
      HardLight.value = new HardLight();
      return HardLight;
  })();
  var SoftLight = (function () {
      function SoftLight() {

      };
      SoftLight.value = new SoftLight();
      return SoftLight;
  })();
  var Difference = (function () {
      function Difference() {

      };
      Difference.value = new Difference();
      return Difference;
  })();
  var Exclusion = (function () {
      function Exclusion() {

      };
      Exclusion.value = new Exclusion();
      return Exclusion;
  })();
  var Hue = (function () {
      function Hue() {

      };
      Hue.value = new Hue();
      return Hue;
  })();
  var Saturation = (function () {
      function Saturation() {

      };
      Saturation.value = new Saturation();
      return Saturation;
  })();
  var Color = (function () {
      function Color() {

      };
      Color.value = new Color();
      return Color;
  })();
  var Luminosity = (function () {
      function Luminosity() {

      };
      Luminosity.value = new Luminosity();
      return Luminosity;
  })();
  var textAlign = function (ctx) {
      var unsafeParseTextAlign = function (v) {
          if (v === "left") {
              return AlignLeft.value;
          };
          if (v === "right") {
              return AlignRight.value;
          };
          if (v === "center") {
              return AlignCenter.value;
          };
          if (v === "start") {
              return AlignStart.value;
          };
          if (v === "end") {
              return AlignEnd.value;
          };
          return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
      };
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
  }; 
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 479, column 5 - line 480, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var setLineCap = function (v) {
      if (v instanceof Round) {
          return $foreign.setLineCapImpl("round");
      };
      if (v instanceof Square) {
          return $foreign.setLineCapImpl("square");
      };
      if (v instanceof Butt) {
          return $foreign.setLineCapImpl("butt");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 212, column 1 - line 213, column 1: " + [ v.constructor.name ]);
  };
  var setGlobalCompositeOperation = function (ctx) {
      return function (composite) {
          var toString = function (v) {
              if (v instanceof SourceOver) {
                  return "source-over";
              };
              if (v instanceof SourceIn) {
                  return "source-in";
              };
              if (v instanceof SourceOut) {
                  return "source-out";
              };
              if (v instanceof SourceAtop) {
                  return "source-atop";
              };
              if (v instanceof DestinationOver) {
                  return "destination-over";
              };
              if (v instanceof DestinationIn) {
                  return "destination-in";
              };
              if (v instanceof DestinationOut) {
                  return "destination-out";
              };
              if (v instanceof DestinationAtop) {
                  return "destination-atop";
              };
              if (v instanceof Lighter) {
                  return "lighter";
              };
              if (v instanceof Copy) {
                  return "copy";
              };
              if (v instanceof Xor) {
                  return "xor";
              };
              if (v instanceof Multiply) {
                  return "multiply";
              };
              if (v instanceof Screen) {
                  return "screen";
              };
              if (v instanceof Overlay) {
                  return "overlay";
              };
              if (v instanceof Darken) {
                  return "darken";
              };
              if (v instanceof Lighten) {
                  return "lighten";
              };
              if (v instanceof ColorDodge) {
                  return "color-dodge";
              };
              if (v instanceof ColorBurn) {
                  return "color-burn";
              };
              if (v instanceof HardLight) {
                  return "hard-light";
              };
              if (v instanceof SoftLight) {
                  return "soft-light";
              };
              if (v instanceof Difference) {
                  return "difference";
              };
              if (v instanceof Exclusion) {
                  return "exclusion";
              };
              if (v instanceof Hue) {
                  return "hue";
              };
              if (v instanceof Saturation) {
                  return "saturation";
              };
              if (v instanceof Color) {
                  return "color";
              };
              if (v instanceof Luminosity) {
                  return "luminosity";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 282, column 5 - line 283, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setGlobalCompositeOperationImpl(ctx)(toString(composite));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var v = $foreign.getCanvasWidth(ce)();
          var v1 = $foreign.getCanvasHeight(ce)();
          return {
              width: v, 
              height: v1
          };
      };
  };
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["SourceOver"] = SourceOver;
  exports["SourceIn"] = SourceIn;
  exports["SourceOut"] = SourceOut;
  exports["SourceAtop"] = SourceAtop;
  exports["DestinationOver"] = DestinationOver;
  exports["DestinationIn"] = DestinationIn;
  exports["DestinationOut"] = DestinationOut;
  exports["DestinationAtop"] = DestinationAtop;
  exports["Lighter"] = Lighter;
  exports["Copy"] = Copy;
  exports["Xor"] = Xor;
  exports["Multiply"] = Multiply;
  exports["Screen"] = Screen;
  exports["Overlay"] = Overlay;
  exports["Darken"] = Darken;
  exports["Lighten"] = Lighten;
  exports["ColorDodge"] = ColorDodge;
  exports["ColorBurn"] = ColorBurn;
  exports["HardLight"] = HardLight;
  exports["SoftLight"] = SoftLight;
  exports["Difference"] = Difference;
  exports["Exclusion"] = Exclusion;
  exports["Hue"] = Hue;
  exports["Saturation"] = Saturation;
  exports["Color"] = Color;
  exports["Luminosity"] = Luminosity;
  exports["setTextAlign"] = setTextAlign;
  exports["textAlign"] = textAlign;
  exports["setGlobalCompositeOperation"] = setGlobalCompositeOperation;
  exports["setLineCap"] = setLineCap;
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["drawImage"] = $foreign.drawImage;
  exports["createImageDataCopy"] = $foreign.createImageDataCopy;
  exports["createImageData"] = $foreign.createImageData;
  exports["putImageDataFull"] = $foreign.putImageDataFull;
  exports["putImageData"] = $foreign.putImageData;
  exports["getImageData"] = $foreign.getImageData;
  exports["restore"] = $foreign.restore;
  exports["save"] = $foreign.save;
  exports["measureText"] = $foreign.measureText;
  exports["strokeText"] = $foreign.strokeText;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["font"] = $foreign.font;
  exports["transform"] = $foreign.transform;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["fillRect"] = $foreign.fillRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["fill"] = $foreign.fill;
  exports["stroke"] = $foreign.stroke;
  exports["beginPath"] = $foreign.beginPath;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["getContext2D"] = $foreign.getContext2D;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];        
  var SetLineWidth = (function () {
      function SetLineWidth(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLineWidth.create = function (value0) {
          return function (value1) {
              return new SetLineWidth(value0, value1);
          };
      };
      return SetLineWidth;
  })();
  var SetFillStyle = (function () {
      function SetFillStyle(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetFillStyle.create = function (value0) {
          return function (value1) {
              return new SetFillStyle(value0, value1);
          };
      };
      return SetFillStyle;
  })();
  var SetStrokeStyle = (function () {
      function SetStrokeStyle(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetStrokeStyle.create = function (value0) {
          return function (value1) {
              return new SetStrokeStyle(value0, value1);
          };
      };
      return SetStrokeStyle;
  })();
  var SetShadowColor = (function () {
      function SetShadowColor(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowColor.create = function (value0) {
          return function (value1) {
              return new SetShadowColor(value0, value1);
          };
      };
      return SetShadowColor;
  })();
  var SetShadowBlur = (function () {
      function SetShadowBlur(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowBlur.create = function (value0) {
          return function (value1) {
              return new SetShadowBlur(value0, value1);
          };
      };
      return SetShadowBlur;
  })();
  var SetShadowOffsetX = (function () {
      function SetShadowOffsetX(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowOffsetX.create = function (value0) {
          return function (value1) {
              return new SetShadowOffsetX(value0, value1);
          };
      };
      return SetShadowOffsetX;
  })();
  var SetShadowOffsetY = (function () {
      function SetShadowOffsetY(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowOffsetY.create = function (value0) {
          return function (value1) {
              return new SetShadowOffsetY(value0, value1);
          };
      };
      return SetShadowOffsetY;
  })();
  var SetLineCap = (function () {
      function SetLineCap(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLineCap.create = function (value0) {
          return function (value1) {
              return new SetLineCap(value0, value1);
          };
      };
      return SetLineCap;
  })();
  var SetComposite = (function () {
      function SetComposite(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetComposite.create = function (value0) {
          return function (value1) {
              return new SetComposite(value0, value1);
          };
      };
      return SetComposite;
  })();
  var SetAlpha = (function () {
      function SetAlpha(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetAlpha.create = function (value0) {
          return function (value1) {
              return new SetAlpha(value0, value1);
          };
      };
      return SetAlpha;
  })();
  var BeginPath = (function () {
      function BeginPath(value0) {
          this.value0 = value0;
      };
      BeginPath.create = function (value0) {
          return new BeginPath(value0);
      };
      return BeginPath;
  })();
  var Stroke = (function () {
      function Stroke(value0) {
          this.value0 = value0;
      };
      Stroke.create = function (value0) {
          return new Stroke(value0);
      };
      return Stroke;
  })();
  var Fill = (function () {
      function Fill(value0) {
          this.value0 = value0;
      };
      Fill.create = function (value0) {
          return new Fill(value0);
      };
      return Fill;
  })();
  var Clip = (function () {
      function Clip(value0) {
          this.value0 = value0;
      };
      Clip.create = function (value0) {
          return new Clip(value0);
      };
      return Clip;
  })();
  var LineTo = (function () {
      function LineTo(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LineTo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LineTo(value0, value1, value2);
              };
          };
      };
      return LineTo;
  })();
  var MoveTo = (function () {
      function MoveTo(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      MoveTo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new MoveTo(value0, value1, value2);
              };
          };
      };
      return MoveTo;
  })();
  var ClosePath = (function () {
      function ClosePath(value0) {
          this.value0 = value0;
      };
      ClosePath.create = function (value0) {
          return new ClosePath(value0);
      };
      return ClosePath;
  })();
  var Arc = (function () {
      function Arc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Arc.create = function (value0) {
          return function (value1) {
              return new Arc(value0, value1);
          };
      };
      return Arc;
  })();
  var Rect = (function () {
      function Rect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rect.create = function (value0) {
          return function (value1) {
              return new Rect(value0, value1);
          };
      };
      return Rect;
  })();
  var FillRect = (function () {
      function FillRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FillRect.create = function (value0) {
          return function (value1) {
              return new FillRect(value0, value1);
          };
      };
      return FillRect;
  })();
  var StrokeRect = (function () {
      function StrokeRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StrokeRect.create = function (value0) {
          return function (value1) {
              return new StrokeRect(value0, value1);
          };
      };
      return StrokeRect;
  })();
  var ClearRect = (function () {
      function ClearRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ClearRect.create = function (value0) {
          return function (value1) {
              return new ClearRect(value0, value1);
          };
      };
      return ClearRect;
  })();
  var Scale = (function () {
      function Scale(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Scale(value0, value1, value2);
              };
          };
      };
      return Scale;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Translate = (function () {
      function Translate(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Translate(value0, value1, value2);
              };
          };
      };
      return Translate;
  })();
  var Transform = (function () {
      function Transform(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Transform.create = function (value0) {
          return function (value1) {
              return new Transform(value0, value1);
          };
      };
      return Transform;
  })();
  var TextAlign = (function () {
      function TextAlign(value0) {
          this.value0 = value0;
      };
      TextAlign.create = function (value0) {
          return new TextAlign(value0);
      };
      return TextAlign;
  })();
  var SetTextAlign = (function () {
      function SetTextAlign(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetTextAlign.create = function (value0) {
          return function (value1) {
              return new SetTextAlign(value0, value1);
          };
      };
      return SetTextAlign;
  })();
  var Font = (function () {
      function Font(value0) {
          this.value0 = value0;
      };
      Font.create = function (value0) {
          return new Font(value0);
      };
      return Font;
  })();
  var SetFont = (function () {
      function SetFont(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetFont.create = function (value0) {
          return function (value1) {
              return new SetFont(value0, value1);
          };
      };
      return SetFont;
  })();
  var FillText = (function () {
      function FillText(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      FillText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new FillText(value0, value1, value2, value3);
                  };
              };
          };
      };
      return FillText;
  })();
  var StrokeText = (function () {
      function StrokeText(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      StrokeText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new StrokeText(value0, value1, value2, value3);
                  };
              };
          };
      };
      return StrokeText;
  })();
  var MeasureText = (function () {
      function MeasureText(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MeasureText.create = function (value0) {
          return function (value1) {
              return new MeasureText(value0, value1);
          };
      };
      return MeasureText;
  })();
  var Save = (function () {
      function Save(value0) {
          this.value0 = value0;
      };
      Save.create = function (value0) {
          return new Save(value0);
      };
      return Save;
  })();
  var Restore = (function () {
      function Restore(value0) {
          this.value0 = value0;
      };
      Restore.create = function (value0) {
          return new Restore(value0);
      };
      return Restore;
  })();
  var GetImageData = (function () {
      function GetImageData(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      GetImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new GetImageData(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return GetImageData;
  })();
  var PutImageData = (function () {
      function PutImageData(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      PutImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new PutImageData(value0, value1, value2, value3);
                  };
              };
          };
      };
      return PutImageData;
  })();
  var PutImageDataFull = (function () {
      function PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
          this.value7 = value7;
      };
      PutImageDataFull.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return function (value7) {
                                      return new PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
      return PutImageDataFull;
  })();
  var CreateImageData = (function () {
      function CreateImageData(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CreateImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CreateImageData(value0, value1, value2);
              };
          };
      };
      return CreateImageData;
  })();
  var CreateImageDataCopy = (function () {
      function CreateImageDataCopy(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CreateImageDataCopy.create = function (value0) {
          return function (value1) {
              return new CreateImageDataCopy(value0, value1);
          };
      };
      return CreateImageDataCopy;
  })();
  var DrawImage = (function () {
      function DrawImage(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DrawImage.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DrawImage(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DrawImage;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Control_Monad_Free.liftFC(new Translate(tx, ty, Prelude.unit));
      };
  };
  var transform = function (tx) {
      return Control_Monad_Free.liftFC(new Transform(tx, Prelude.unit));
  };
  var textAlign = Control_Monad_Free.liftFC(new TextAlign(Prelude.id(Prelude.categoryFn)));
  var strokeText = function (s) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new StrokeText(s, x, y, Prelude.unit));
          };
      };
  };
  var strokeRect = function (r) {
      return Control_Monad_Free.liftFC(new StrokeRect(r, Prelude.unit));
  };
  var stroke = Control_Monad_Free.liftFC(new Stroke(Prelude.unit));
  var setTextAlign = function (ta) {
      return Control_Monad_Free.liftFC(new SetTextAlign(ta, Prelude.unit));
  };
  var setStrokeStyle = function (s) {
      return Control_Monad_Free.liftFC(new SetStrokeStyle(s, Prelude.unit));
  };
  var setShadowOffsetY = function (n) {
      return Control_Monad_Free.liftFC(new SetShadowOffsetY(n, Prelude.unit));
  };
  var setShadowOffsetX = function (n) {
      return Control_Monad_Free.liftFC(new SetShadowOffsetX(n, Prelude.unit));
  };
  var setShadowColor = function (c) {
      return Control_Monad_Free.liftFC(new SetShadowColor(c, Prelude.unit));
  };
  var setShadowBlur = function (n) {
      return Control_Monad_Free.liftFC(new SetShadowBlur(n, Prelude.unit));
  };
  var setLineWidth = function (w) {
      return Control_Monad_Free.liftFC(new SetLineWidth(w, Prelude.unit));
  };
  var setLineCap = function (lc) {
      return Control_Monad_Free.liftFC(new SetLineCap(lc, Prelude.unit));
  };
  var setFont = function (f) {
      return Control_Monad_Free.liftFC(new SetFont(f, Prelude.unit));
  };
  var setFillStyle = function (s) {
      return Control_Monad_Free.liftFC(new SetFillStyle(s, Prelude.unit));
  };
  var scale = function (sx) {
      return function (sy) {
          return Control_Monad_Free.liftFC(new Scale(sx, sy, Prelude.unit));
      };
  };
  var save = Control_Monad_Free.liftFC(new Save(Prelude.unit));
  var runGraphics = function (ctx) {
      var interp = function (v) {
          if (v instanceof SetLineWidth) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setLineWidth(v.value0)(ctx));
          };
          if (v instanceof SetFillStyle) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setFillStyle(v.value0)(ctx));
          };
          if (v instanceof SetStrokeStyle) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setStrokeStyle(v.value0)(ctx));
          };
          if (v instanceof SetShadowColor) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setShadowColor(v.value0)(ctx));
          };
          if (v instanceof SetShadowBlur) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setShadowBlur(v.value0)(ctx));
          };
          if (v instanceof SetShadowOffsetX) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setShadowOffsetX(v.value0)(ctx));
          };
          if (v instanceof SetShadowOffsetY) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setShadowOffsetY(v.value0)(ctx));
          };
          if (v instanceof SetLineCap) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setLineCap(v.value0)(ctx));
          };
          if (v instanceof SetComposite) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setGlobalCompositeOperation(ctx)(v.value0));
          };
          if (v instanceof SetAlpha) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setGlobalAlpha(ctx)(v.value0));
          };
          if (v instanceof BeginPath) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value0))(Graphics_Canvas.beginPath(ctx));
          };
          if (v instanceof Stroke) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value0))(Graphics_Canvas.stroke(ctx));
          };
          if (v instanceof Fill) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value0))(Graphics_Canvas.fill(ctx));
          };
          if (v instanceof Clip) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value0))(Graphics_Canvas.clip(ctx));
          };
          if (v instanceof LineTo) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value2))(Graphics_Canvas.lineTo(ctx)(v.value0)(v.value1));
          };
          if (v instanceof MoveTo) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value2))(Graphics_Canvas.moveTo(ctx)(v.value0)(v.value1));
          };
          if (v instanceof ClosePath) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value0))(Graphics_Canvas.closePath(ctx));
          };
          if (v instanceof Arc) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.arc(ctx)(v.value0));
          };
          if (v instanceof Rect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof FillRect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.fillRect(ctx)(v.value0));
          };
          if (v instanceof StrokeRect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.strokeRect(ctx)(v.value0));
          };
          if (v instanceof ClearRect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.clearRect(ctx)(v.value0));
          };
          if (v instanceof Scale) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value2))(Graphics_Canvas.scale({
                  scaleX: v.value0, 
                  scaleY: v.value1
              })(ctx));
          };
          if (v instanceof Rotate) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.rotate(v.value0)(ctx));
          };
          if (v instanceof Translate) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value2))(Graphics_Canvas.translate({
                  translateX: v.value0, 
                  translateY: v.value1
              })(ctx));
          };
          if (v instanceof Transform) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.transform(v.value0)(ctx));
          };
          if (v instanceof TextAlign) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(v.value0)(Graphics_Canvas.textAlign(ctx));
          };
          if (v instanceof SetTextAlign) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setTextAlign(ctx)(v.value0));
          };
          if (v instanceof Font) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(v.value0)(Graphics_Canvas.font(ctx));
          };
          if (v instanceof SetFont) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value1))(Graphics_Canvas.setFont(v.value0)(ctx));
          };
          if (v instanceof FillText) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value3))(Graphics_Canvas.fillText(ctx)(v.value0)(v.value1)(v.value2));
          };
          if (v instanceof StrokeText) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value3))(Graphics_Canvas.strokeText(ctx)(v.value0)(v.value1)(v.value2));
          };
          if (v instanceof MeasureText) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(v.value1)(Graphics_Canvas.measureText(ctx)(v.value0));
          };
          if (v instanceof Save) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value0))(Graphics_Canvas.save(ctx));
          };
          if (v instanceof Restore) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value0))(Graphics_Canvas.restore(ctx));
          };
          if (v instanceof GetImageData) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(v.value4)(Graphics_Canvas.getImageData(ctx)(v.value0)(v.value1)(v.value2)(v.value3));
          };
          if (v instanceof PutImageData) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value3))(Graphics_Canvas.putImageData(ctx)(v.value0)(v.value1)(v.value2));
          };
          if (v instanceof PutImageDataFull) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value7))(Graphics_Canvas.putImageDataFull(ctx)(v.value0)(v.value1)(v.value2)(v.value3)(v.value4)(v.value5)(v.value6));
          };
          if (v instanceof CreateImageData) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(v.value2)(Graphics_Canvas.createImageData(ctx)(v.value0)(v.value1));
          };
          if (v instanceof CreateImageDataCopy) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(v.value1)(Graphics_Canvas.createImageDataCopy(ctx)(v.value0));
          };
          if (v instanceof DrawImage) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](v.value3))(Graphics_Canvas.drawImage(ctx)(v.value0)(v.value1)(v.value2));
          };
          throw new Error("Failed pattern match at Graphics.Canvas.Free line 236, column 3 - line 237, column 3: " + [ v.constructor.name ]);
      };
      return Control_Monad_Free.runFreeCM(Control_Monad_Rec_Class.monadRecEff)(interp);
  };
  var rotate = function (th) {
      return Control_Monad_Free.liftFC(new Rotate(th, Prelude.unit));
  };
  var restore = Control_Monad_Free.liftFC(new Restore(Prelude.unit));
  var rect = function (r) {
      return Control_Monad_Free.liftFC(new Rect(r, Prelude.unit));
  };
  var putImageDataFull = function (d) {
      return function (x) {
          return function (y) {
              return function (dx) {
                  return function (dy) {
                      return function (dw) {
                          return function (dh) {
                              return Control_Monad_Free.liftFC(new PutImageDataFull(d, x, y, dx, dy, dw, dh, Prelude.unit));
                          };
                      };
                  };
              };
          };
      };
  };
  var putImageData = function (d) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new PutImageData(d, x, y, Prelude.unit));
          };
      };
  };
  var moveTo = function (x) {
      return function (y) {
          return Control_Monad_Free.liftFC(new MoveTo(x, y, Prelude.unit));
      };
  };
  var measureText = function (s) {
      return Control_Monad_Free.liftFC(new MeasureText(s, Prelude.id(Prelude.categoryFn)));
  };
  var lineTo = function (x) {
      return function (y) {
          return Control_Monad_Free.liftFC(new LineTo(x, y, Prelude.unit));
      };
  };
  var getImageData = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return Control_Monad_Free.liftFC(new GetImageData(x, y, w, h, Prelude.id(Prelude.categoryFn)));
              };
          };
      };
  };
  var font = Control_Monad_Free.liftFC(new Font(Prelude.id(Prelude.categoryFn)));
  var fillText = function (s) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new FillText(s, x, y, Prelude.unit));
          };
      };
  };
  var fillRect = function (r) {
      return Control_Monad_Free.liftFC(new FillRect(r, Prelude.unit));
  };
  var fill = Control_Monad_Free.liftFC(new Fill(Prelude.unit));
  var drawImage = function (src) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new DrawImage(src, x, y, Prelude.unit));
          };
      };
  };
  var createImageDataCopy = function (d) {
      return Control_Monad_Free.liftFC(new CreateImageDataCopy(d, Prelude.id(Prelude.categoryFn)));
  };
  var createImageData = function (w) {
      return function (h) {
          return Control_Monad_Free.liftFC(new CreateImageData(w, h, Prelude.id(Prelude.categoryFn)));
      };
  };
  var closePath = Control_Monad_Free.liftFC(new ClosePath(Prelude.unit));
  var clip = Control_Monad_Free.liftFC(new Clip(Prelude.unit));
  var clearRect = function (r) {
      return Control_Monad_Free.liftFC(new ClearRect(r, Prelude.unit));
  };
  var beginPath = Control_Monad_Free.liftFC(new BeginPath(Prelude.unit));
  var arc = function (a) {
      return Control_Monad_Free.liftFC(new Arc(a, Prelude.unit));
  };
  exports["runGraphics"] = runGraphics;
  exports["drawImage"] = drawImage;
  exports["createImageDataCopy"] = createImageDataCopy;
  exports["createImageData"] = createImageData;
  exports["putImageDataFull"] = putImageDataFull;
  exports["putImageData"] = putImageData;
  exports["getImageData"] = getImageData;
  exports["restore"] = restore;
  exports["save"] = save;
  exports["measureText"] = measureText;
  exports["strokeText"] = strokeText;
  exports["fillText"] = fillText;
  exports["setFont"] = setFont;
  exports["font"] = font;
  exports["setTextAlign"] = setTextAlign;
  exports["textAlign"] = textAlign;
  exports["transform"] = transform;
  exports["translate"] = translate;
  exports["rotate"] = rotate;
  exports["scale"] = scale;
  exports["clearRect"] = clearRect;
  exports["strokeRect"] = strokeRect;
  exports["fillRect"] = fillRect;
  exports["rect"] = rect;
  exports["arc"] = arc;
  exports["closePath"] = closePath;
  exports["moveTo"] = moveTo;
  exports["lineTo"] = lineTo;
  exports["clip"] = clip;
  exports["fill"] = fill;
  exports["stroke"] = stroke;
  exports["beginPath"] = beginPath;
  exports["setLineCap"] = setLineCap;
  exports["setShadowOffsetY"] = setShadowOffsetY;
  exports["setShadowOffsetX"] = setShadowOffsetX;
  exports["setShadowBlur"] = setShadowBlur;
  exports["setShadowColor"] = setShadowColor;
  exports["setStrokeStyle"] = setStrokeStyle;
  exports["setFillStyle"] = setFillStyle;
  exports["setLineWidth"] = setLineWidth;
})(PS["Graphics.Canvas.Free"] = PS["Graphics.Canvas.Free"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Plus = PS["Control.Plus"];        
  var aroundCells = function (cx) {
      return function (cy) {
          return function (xmax) {
              return function (ymax) {
                  return Prelude.bind(Prelude.bindArray)([ cy - 1, cy, cy + 1 | 0 ])(function (v) {
                      return Prelude.bind(Prelude.bindArray)([ cx - 1, cx, cx + 1 | 0 ])(function (v1) {
                          var $8 = v1 < 0 || (v < 0 || (v1 >= xmax || (v >= ymax || cx === v1 && cy === v)));
                          if ($8) {
                              return Control_Plus.empty(Control_Plus.plusArray);
                          };
                          if (!$8) {
                              return Prelude["return"](Prelude.applicativeArray)(new Data_Tuple.Tuple(v1, v));
                          };
                          throw new Error("Failed pattern match at LifeGame line 42, column 3 - line 42, column 104: " + [ $8.constructor.name ]);
                      });
                  });
              };
          };
      };
  };
  var next = function (v) {
      return function (prev) {
          return function (range) {
              var min = function (a) {
                  return function (b) {
                      var $12 = a < b;
                      if ($12) {
                          return a;
                      };
                      if (!$12) {
                          return b;
                      };
                      throw new Error("Failed pattern match at LifeGame line 36, column 15 - line 38, column 1: " + [ $12.constructor.name ]);
                  };
              };
              var rule = function (y) {
                  return function (x) {
                      return function (target) {
                          var cell = function (v1) {
                              return Prelude[">>="](Data_Maybe.bindMaybe)(Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array["!!"](prev)(v1.value1))(function (v2) {
                                  return Data_Array["!!"](v2)(v1.value0);
                              }))(function (n) {
                                  return Prelude["return"](Data_Maybe.applicativeMaybe)((function () {
                                      if (n === 0) {
                                          return 0;
                                      };
                                      return 1;
                                  })());
                              });
                          };
                          var aroundLives = Data_Foldable.sum(Data_Foldable.foldableArray)(Prelude.semiringInt)(Data_Array.catMaybes(Prelude["<$>"](Prelude.functorArray)(cell)(aroundCells(x)(y)(v.width)(v.height))));
                          var $17 = target === 0;
                          if ($17) {
                              var $18 = aroundLives === 3;
                              if ($18) {
                                  return 1;
                              };
                              if (!$18) {
                                  return 0;
                              };
                              throw new Error("Failed pattern match at LifeGame line 26, column 9 - line 27, column 7: " + [ $18.constructor.name ]);
                          };
                          if (!$17) {
                              var $19 = aroundLives === 2 || aroundLives === 3;
                              if ($19) {
                                  return min(target + 1 | 0)(255);
                              };
                              if (!$19) {
                                  return 0;
                              };
                              throw new Error("Failed pattern match at LifeGame line 28, column 9 - line 29, column 7: " + [ $19.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at LifeGame line 25, column 7 - line 29, column 7: " + [ $17.constructor.name ]);
                      };
                  };
              };
              return Data_Maybe.fromMaybe([  ])(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Array.zipWith(function (row) {
                  return function (cols) {
                      return Data_Array.zipWith(rule(row))(Data_Array[".."](0)(v.width - 1))(cols);
                  };
              })(range))(Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Array.slice)(Data_Array.head(range)))(Prelude["<$>"](Data_Maybe.functorMaybe)(function (v1) {
                  return v1 + 1 | 0;
              })(Data_Array.last(range))))(Prelude.pure(Data_Maybe.applicativeMaybe)(prev))));
          };
      };
  };
  exports["next"] = next;
})(PS["LifeGame"] = PS["LifeGame"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var LifeGame = PS["LifeGame"];                                                                                                                  
  var gliderGun = [ [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ];
  exports["gliderGun"] = gliderGun;
})(PS["LifeGame.Data"] = PS["LifeGame.Data"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Data_Array = PS["Data.Array"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Nullable = PS["Data.Nullable"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Parallel = PS["Control.Parallel"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_EventTypes = PS["DOM.Event.EventTypes"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_RequestAnimationFrame = PS["DOM.RequestAnimationFrame"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Canvas_Free = PS["Graphics.Canvas.Free"];
  var Color = PS["Color"];
  var LifeGame = PS["LifeGame"];
  var LifeGame_Data = PS["LifeGame.Data"];
  var DOMUtil = PS["DOMUtil"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Data_Monoid = PS["Data.Monoid"];        
  var Running = (function () {
      function Running() {

      };
      Running.value = new Running();
      return Running;
  })();
  var Stopped = (function () {
      function Stopped() {

      };
      Stopped.value = new Stopped();
      return Stopped;
  })();
  var Stopping = (function () {
      function Stopping() {

      };
      Stopping.value = new Stopping();
      return Stopping;
  })();
  var $eq$less$less$eq = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Just) {
                  return Prelude["void"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(v(v1.value0));
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Prelude.pure(dictApplicative)(Prelude.unit);
              };
              throw new Error("Failed pattern match at Main line 159, column 1 - line 160, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var stopLoop = function (state) {
      return function (v) {
          return function __do() {
              var v1 = Control_Monad_ST.readSTRef(state)();
              if (v1.timeState instanceof Running) {
                  return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                      Control_Monad_ST.modifySTRef(state)(function (g) {
                          var $31 = {};
                          for (var $32 in g) {
                              if (g.hasOwnProperty($32)) {
                                  $31[$32] = g[$32];
                              };
                          };
                          $31.timeState = Stopping.value;
                          return $31;
                      })();
                      $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(DOMUtil.enableElement)(v1.startButton)();
                      return $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(DOMUtil.disableElement)(v1.stopButton)();
                  })();
              };
              return Prelude.unit;
          };
      };
  };
  var showStepRateIndicator = function (gs) {
      return $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(DOMUtil.setText("step forward per " + (Prelude.show(Prelude.showInt)(gs.stepRate) + " frame")))(gs.rateIndicator);
  };
  var updateStepRate = function (state) {
      return function (updater) {
          return Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_ST.modifySTRef(state)(updater))(showStepRateIndicator);
      };
  };
  var showGeneration = function (generation) {
      return function (gs) {
          return $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(DOMUtil.setText(Prelude.show(Prelude.showInt)(generation) + " Generation"))(gs.generationScore);
      };
  };
  var rateIncrement = function (state) {
      return function (v) {
          return updateStepRate(state)(function (s) {
              var $33 = s.stepRate > 1;
              if ($33) {
                  var $34 = {};
                  for (var $35 in s) {
                      if (s.hasOwnProperty($35)) {
                          $34[$35] = s[$35];
                      };
                  };
                  $34.stepRate = s.stepRate - 1;
                  return $34;
              };
              if (!$33) {
                  return s;
              };
              throw new Error("Failed pattern match at Main line 68, column 30 - line 70, column 1: " + [ $33.constructor.name ]);
          });
      };
  };
  var rateDecrement = function (state) {
      return function (v) {
          return updateStepRate(state)(function (s) {
              var $36 = s.stepRate < 100;
              if ($36) {
                  var $37 = {};
                  for (var $38 in s) {
                      if (s.hasOwnProperty($38)) {
                          $37[$38] = s[$38];
                      };
                  };
                  $37.stepRate = s.stepRate + 1 | 0;
                  return $37;
              };
              if (!$36) {
                  return s;
              };
              throw new Error("Failed pattern match at Main line 72, column 30 - line 74, column 1: " + [ $36.constructor.name ]);
          });
      };
  };
  var drawCells = function (cellRect) {
      return function (size) {
          return function (field) {
              var color = function (age) {
                  return Graphics_Canvas_Free.setFillStyle(Color.toHexString(Color.rgb(255 - age)(age)(140)));
              };
              var draw = function (row) {
                  return function (col) {
                      return function (target) {
                          if (target === 0) {
                              return Prelude.pure(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Prelude.unit);
                          };
                          if (Prelude.otherwise) {
                              return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(color(target))(function () {
                                  return Prelude["void"](Control_Monad_Free.functorFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.fillRect((function () {
                                      var $42 = {};
                                      for (var $43 in cellRect) {
                                          if (cellRect.hasOwnProperty($43)) {
                                              $42[$43] = cellRect[$43];
                                          };
                                      };
                                      $42.x = Data_Int.toNumber(col) * cellRect.w;
                                      $42.y = Data_Int.toNumber(row) * cellRect.h;
                                      return $42;
                                  })()));
                              });
                          };
                          throw new Error("Failed pattern match at Main line 131, column 1 - line 141, column 1: " + [ row.constructor.name, col.constructor.name, target.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.sequence_(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_Foldable.foldableArray)(Control_Bind.join(Prelude.bindArray)(Data_Array.zipWith(function (row) {
                  return function (cols) {
                      return Data_Array.zipWith(draw(row))(Data_Array[".."](0)(size.width))(cols);
                  };
              })(Data_Array[".."](0)(size.height))(field)));
          };
      };
  };
  var chunks = function (v) {
      return function (arr) {
          if (v === 0) {
              return [  ];
          };
          if (v === 1) {
              return [ arr ];
          };
          var chunks$prime = function (i1) {
              return function (v1) {
                  if (v1.length === 0) {
                      return [  ];
                  };
                  return Data_Array[":"](Data_Array.take(i1)(v1))(chunks$prime(i1)(Data_Array.drop(i1)(v1)));
              };
          };
          return chunks$prime(Data_Array.length(arr) / v | 0)(arr);
      };
  };
  var startLoop = function (state) {
      return function (v) {
          var mainLoop = function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v2 = Graphics_Canvas.getContext2D(v1.value0)();
                      var v3 = Graphics_Canvas.getCanvasDimensions(v1.value0)();
                      var initialField = Data_Array.concat([ LifeGame_Data.gliderGun, LifeGame_Data.gliderGun ]);
                      var size = {
                          height: Data_Array.length(initialField), 
                          width: Data_Maybe.fromMaybe(0)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Array.length)(Data_Array.head(initialField)))
                      };
                      var ranges = chunks(2)(Data_Array[".."](0)(size.height - 1));
                      var cellSize = $$Math.max(Data_Int.toNumber(size.height))(Data_Int.toNumber(size.width));
                      var cellRect = {
                          x: 0.0, 
                          y: 0.0, 
                          w: v3.width / cellSize, 
                          h: v3.height / cellSize
                      };
                      var loop = function (generation) {
                          return function (field) {
                              var delayFrame = function (frameNum) {
                                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude["<<<"](Prelude.semigroupoidFn))(DOM_RequestAnimationFrame.requestAnimationFrame)(Data_Array.replicate(frameNum)(DOM_RequestAnimationFrame.requestAnimationFrame));
                              };
                              var loop$prime = function (v4) {
                                  if (v4.timeState instanceof Stopping) {
                                      return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.modifySTRef(state)(function (g) {
                                          var $52 = {};
                                          for (var $53 in g) {
                                              if (g.hasOwnProperty($53)) {
                                                  $52[$53] = g[$53];
                                              };
                                          };
                                          $52.timeState = Stopped.value;
                                          return $52;
                                      }));
                                  };
                                  if (v4.timeState instanceof Running) {
                                      return function __do() {
                                          showGeneration(generation)(v4)();
                                          Graphics_Canvas_Free.runGraphics(v2)(Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.clearRect({
                                              x: 0.0, 
                                              y: 0.0, 
                                              w: v3.width, 
                                              h: v3.height
                                          }))(function () {
                                              return drawCells(cellRect)(size)(field);
                                          }))();
                                          return Prelude.flip(Control_Monad_Cont_Trans.runContT)(function ($68) {
                                              return delayFrame(v4.stepRate - 1)(loop(generation + 1 | 0)($68));
                                          })(Control_Parallel.runParallel(Prelude["<$>"](Control_Parallel.functorParallel)(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray))(Data_Traversable["for"](Control_Parallel.applicativeParallel)(Data_Traversable.traversableArray)(ranges)(function ($69) {
                                              return Control_Parallel.inParallel(Prelude.pure(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.monadEff))(LifeGame.next(size)(field)($69)));
                                          }))))();
                                      };
                                  };
                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
                              };
                              return function __do() {
                                  var v4 = Control_Monad_ST.readSTRef(state)();
                                  return loop$prime(v4)();
                              };
                          };
                      };
                      return loop(0)(initialField)();
                  };
              };
              throw new Error("Failed pattern match at Main line 92, column 5 - line 99, column 5: " + [ v1.constructor.name ]);
          };
          var startLoop$prime = function (v1) {
              if (v1.timeState instanceof Stopped) {
                  return function __do() {
                      Control_Monad_ST.modifySTRef(state)(function (g) {
                          var $59 = {};
                          for (var $60 in g) {
                              if (g.hasOwnProperty($60)) {
                                  $59[$60] = g[$60];
                              };
                          };
                          $59.timeState = Running.value;
                          return $59;
                      })();
                      $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(DOMUtil.disableElement)(v1.startButton)();
                      $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(DOMUtil.enableElement)(v1.stopButton)();
                      return Prelude[">>="](Control_Monad_Eff.bindEff)(Graphics_Canvas.getCanvasElementById("canvas"))(mainLoop)();
                  };
              };
              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          return function __do() {
              var v1 = Control_Monad_ST.readSTRef(state)();
              return startLoop$prime(v1)();
          };
      };
  };
  var main = (function () {
      var registerListener = function (event) {
          return function (listener) {
              return $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(function ($70) {
                  return DOM_Event_EventTarget.addEventListener(event)(DOM_Event_EventTarget.eventListener(listener))(true)(DOM_Node_Types.elementToEventTarget($70));
              });
          };
      };
      return function __do() {
          var v = Prelude["<$>"](Control_Monad_Eff.functorEff)(DOM_HTML_Types.htmlDocumentToParentNode)(Prelude[">>="](Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.document))();
          var v1 = Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<$>"](Control_Monad_Eff.functorEff)(function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return {
                              timeState: Stopped.value, 
                              stepRate: 3, 
                              startButton: v1, 
                              stopButton: v2, 
                              generationScore: v3, 
                              rateIndicator: v4
                          };
                      };
                  };
              };
          })(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_Node_ParentNode.querySelector("#start")(v))))(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_Node_ParentNode.querySelector("#stop")(v))))(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_Node_ParentNode.querySelector("#generation")(v))))(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_Node_ParentNode.querySelector("#rate")(v)))();
          var v2 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_Node_ParentNode.querySelector("#rateInc")(v))();
          var v3 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_Node_ParentNode.querySelector("#rateDec")(v))();
          $eq$less$less$eq(Control_Monad_Eff.applicativeEff)(DOMUtil.disableElement)(v1.stopButton)();
          showGeneration(0)(v1)();
          showStepRateIndicator(v1)();
          var v4 = Control_Monad_ST.newSTRef(v1)();
          registerListener(DOM_Event_EventTypes.click)(startLoop(v4))(v1.startButton)();
          registerListener(DOM_Event_EventTypes.click)(stopLoop(v4))(v1.stopButton)();
          registerListener(DOM_Event_EventTypes.click)(rateIncrement(v4))(v2)();
          return registerListener(DOM_Event_EventTypes.click)(rateDecrement(v4))(v3)();
      };
  })();
  exports["Running"] = Running;
  exports["Stopped"] = Stopped;
  exports["Stopping"] = Stopping;
  exports["=<<="] = $eq$less$less$eq;
  exports["chunks"] = chunks;
  exports["showGeneration"] = showGeneration;
  exports["showStepRateIndicator"] = showStepRateIndicator;
  exports["drawCells"] = drawCells;
  exports["startLoop"] = startLoop;
  exports["stopLoop"] = stopLoop;
  exports["updateStepRate"] = updateStepRate;
  exports["rateDecrement"] = rateDecrement;
  exports["rateIncrement"] = rateIncrement;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();

},{}]},{},[1]);
